# Generated by Django 5.2.2 on 2025-06-26 14:24

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('business', '0001_initial'),
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(help_text='Name of the tour package', max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='URL-friendly version of the name', max_length=255, unique=True, verbose_name='Slug')),
                ('description', models.TextField(help_text='Detailed description of the tour', verbose_name='Description')),
                ('tour_type', models.CharField(choices=[('PRIVATE', 'Private'), ('GROUP', 'Group'), ('CUSTOM', 'Custom')], default='GROUP', help_text='Type of tour', max_length=20, verbose_name='Tour Type')),
                ('duration_days', models.IntegerField(help_text='Duration of the tour in days', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Duration (Days)')),
                ('min_participants', models.IntegerField(default=1, help_text='Minimum number of participants required', verbose_name='Minimum Participants')),
                ('max_participants', models.IntegerField(help_text='Maximum number of participants allowed', verbose_name='Maximum Participants')),
                ('price_per_person', models.DecimalField(decimal_places=2, help_text='Base price per person in XAF', max_digits=10, verbose_name='Price per Person')),
                ('main_image', models.ImageField(help_text='Primary image of the tour', upload_to='tours/', verbose_name='Main Image')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this tour is active', verbose_name='Active')),
                ('business_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tours', to='business.businesslocation', verbose_name='Business Location')),
            ],
            options={
                'verbose_name': 'Tour',
                'verbose_name_plural': 'Tours',
                'db_table': 'tour',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TourActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(help_text='Name of the activity', max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='URL-friendly version of the name', max_length=255, unique=True, verbose_name='Slug')),
                ('description', models.TextField(help_text='Detailed description of the activity', verbose_name='Description')),
                ('day_number', models.IntegerField(help_text='Day of the tour when this activity takes place', verbose_name='Day Number')),
                ('duration', models.DurationField(help_text='Expected duration of the activity', verbose_name='Duration')),
                ('difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MODERATE', 'Moderate'), ('DIFFICULT', 'Difficult'), ('EXPERT', 'Expert')], default='MODERATE', help_text='Difficulty level of the activity', max_length=20, verbose_name='Difficulty Level')),
                ('min_participants', models.IntegerField(default=1, help_text='Minimum number of participants required', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Minimum Participants')),
                ('max_participants', models.IntegerField(help_text='Maximum number of participants allowed', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Maximum Participants')),
                ('requirements', models.JSONField(blank=True, default=list, help_text='List of requirements for participants', verbose_name='Requirements')),
                ('is_optional', models.BooleanField(default=False, help_text='Whether this activity is optional', verbose_name='Optional')),
                ('additional_price', models.DecimalField(decimal_places=2, default=0, help_text='Additional price for this activity in XAF', max_digits=10, verbose_name='Additional Price')),
                ('included', models.JSONField(blank=True, default=list, help_text='List of items/services included', verbose_name='Included')),
                ('not_included', models.JSONField(blank=True, default=list, help_text='List of items/services not included', verbose_name='Not Included')),
                ('main_image', models.ImageField(help_text='Primary image of the activity', upload_to='activities/', verbose_name='Main Image')),
                ('price', models.DecimalField(decimal_places=2, help_text='Base price per person in XAF', max_digits=10, verbose_name='Price')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this activity is active', verbose_name='Active')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this activity should be featured', verbose_name='Featured')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='tours.tour', verbose_name='Tour')),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
                'db_table': 'activity',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TourActivityImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('image', models.ImageField(help_text='Additional image of the activity', upload_to='activities/', verbose_name='Image')),
                ('caption', models.CharField(blank=True, help_text='Optional caption for the image', max_length=255, verbose_name='Caption')),
                ('order', models.IntegerField(default=0, help_text='Order in which the image appears in the gallery', verbose_name='Display Order')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='tours.touractivity', verbose_name='Activity')),
            ],
            options={
                'verbose_name': 'Activity Image',
                'verbose_name_plural': 'Activity Images',
                'db_table': 'activity_image',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='TourDestination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('street_address', models.CharField(blank=True, help_text='Street address including house/building number', max_length=255, verbose_name='Street Address')),
                ('neighborhood', models.CharField(blank=True, help_text='Neighborhood or district', max_length=100, verbose_name='Neighborhood')),
                ('city', models.CharField(help_text='City name', max_length=100, verbose_name='City')),
                ('region', models.CharField(help_text='State, province, or region', max_length=100, verbose_name='Region')),
                ('country', models.CharField(default='Cameroon', help_text='Country name', max_length=100, verbose_name='Country')),
                ('postal_code', models.CharField(blank=True, help_text='Postal or ZIP code', max_length=20, verbose_name='Postal Code')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='Latitude coordinate', max_digits=10, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Longitude coordinate', max_digits=11, null=True, verbose_name='Longitude')),
                ('name', models.CharField(help_text='Name of the destination', max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='URL-friendly version of the name', max_length=255, unique=True, verbose_name='Slug')),
                ('description', models.TextField(help_text='Detailed description of the destination', verbose_name='Description')),
                ('highlights', models.JSONField(blank=True, default=list, help_text='Key highlights and features of the destination', verbose_name='Highlights')),
                ('features', models.JSONField(blank=True, default=list, help_text='List of destination features and attractions', verbose_name='Features')),
                ('best_time_to_visit', models.CharField(blank=True, help_text='Recommended time period to visit', max_length=255, verbose_name='Best Time to Visit')),
                ('day_number', models.IntegerField(help_text='Day of the tour when this destination is visited', verbose_name='Day Number')),
                ('duration', models.DurationField(help_text='Time spent at this destination', verbose_name='Duration')),
                ('climate', models.TextField(blank=True, help_text='Description of the local climate', verbose_name='Climate')),
                ('how_to_get_there', models.TextField(blank=True, help_text='Transportation and access information', verbose_name='How to Get There')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this destination is active', verbose_name='Active')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this destination should be featured', verbose_name='Featured')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='destinations', to='tours.tour', verbose_name='Tour')),
            ],
            options={
                'verbose_name': 'Destination',
                'verbose_name_plural': 'Destinations',
                'db_table': 'destination',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TourDestinationImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('image', models.ImageField(help_text='Additional image of the destination', upload_to='destinations/', verbose_name='Image')),
                ('caption', models.CharField(blank=True, help_text='Optional caption for the image', max_length=255, verbose_name='Caption')),
                ('order', models.IntegerField(default=0, help_text='Order in which the image appears in the gallery', verbose_name='Display Order')),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='tours.tourdestination', verbose_name='Destination')),
            ],
            options={
                'verbose_name': 'Destination Image',
                'verbose_name_plural': 'Destination Images',
                'db_table': 'destination_image',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='TourImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('image', models.ImageField(help_text='Additional image of the tour', upload_to='tours/', verbose_name='Image')),
                ('caption', models.CharField(blank=True, help_text='Optional caption for the image', max_length=255, verbose_name='Caption')),
                ('order', models.IntegerField(default=0, help_text='Order in which the image appears in the gallery', verbose_name='Display Order')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='tours.tour', verbose_name='Tour')),
            ],
            options={
                'verbose_name': 'Tour Image',
                'verbose_name_plural': 'Tour Images',
                'db_table': 'tour_image',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='TourSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('start_datetime', models.DateTimeField(verbose_name='Start Date and Time')),
                ('end_datetime', models.DateTimeField(blank=True, null=True, verbose_name='End Date and Time')),
                ('available_spots', models.IntegerField(verbose_name='Available Spots')),
                ('price_override', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Price Override')),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed')], default='SCHEDULED', max_length=20)),
                ('cancellation_reason', models.TextField(blank=True, null=True, verbose_name='Cancellation Reason')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tour_schedules', to='tours.tour', verbose_name='Tour')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TourReview',
            fields=[
                ('review_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.review')),
                ('guide_rating', models.IntegerField(help_text='Rating for the tour guide from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Guide Rating')),
                ('value_rating', models.IntegerField(help_text='Rating for value for money from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Value for Money Rating')),
                ('activities_rating', models.IntegerField(help_text='Rating for the activities from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Activities Rating')),
                ('transportation_rating', models.IntegerField(help_text='Rating for transportation from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Transportation Rating')),
                ('accommodation_rating', models.IntegerField(blank=True, help_text='Rating for accommodation from 1 to 5 stars', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Accommodation Rating')),
                ('food_rating', models.IntegerField(blank=True, help_text='Rating for food from 1 to 5 stars', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Food Rating')),
                ('pros', models.TextField(blank=True, help_text='Positive aspects of the tour', verbose_name='Pros')),
                ('cons', models.TextField(blank=True, help_text='Negative aspects of the tour', verbose_name='Cons')),
                ('tips', models.TextField(blank=True, help_text='Tips for future travelers', verbose_name='Tips')),
                ('would_recommend', models.BooleanField(help_text='Whether the reviewer would recommend this tour', verbose_name='Would Recommend')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tour_reviews', to='tours.tour', verbose_name='Tour')),
            ],
            options={
                'verbose_name': 'Tour Review',
                'verbose_name_plural': 'Tour Reviews',
                'ordering': ['-created_at'],
                'unique_together': {('tour',)},
            },
            bases=('core.review',),
        ),
        migrations.CreateModel(
            name='TourBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Total Amount')),
                ('commission_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Commission Amount')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed'), ('NO_SHOW', 'No Show')], default='PENDING', max_length=20, verbose_name='Status')),
                ('booking_reference', models.CharField(max_length=50, unique=True, verbose_name='Booking Reference')),
                ('special_requests', models.TextField(blank=True, null=True, verbose_name='Special Requests')),
                ('customer_notes', models.TextField(blank=True, null=True, verbose_name='Customer Notes')),
                ('cancellation_reason', models.TextField(blank=True, null=True, verbose_name='Cancellation Reason')),
                ('cancelled_at', models.DateTimeField(blank=True, null=True, verbose_name='Cancelled At')),
                ('number_of_participants', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number of Participants')),
                ('guide_notes', models.TextField(blank=True, null=True, verbose_name='Guide Notes')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
                ('tour_schedule', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bookings', to='tours.tourschedule', verbose_name='Tour Schedule')),
            ],
            options={
                'verbose_name': 'Tour Booking',
                'verbose_name_plural': 'Tour Bookings',
                'ordering': ['-created_at'],
                'unique_together': {('tour_schedule', 'customer')},
            },
        ),
    ]
