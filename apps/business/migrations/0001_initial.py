# Generated by Django 5.2.2 on 2025-06-26 14:24

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessAmenityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icon Class')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Business Amenity Category',
                'verbose_name_plural': 'Business Amenity Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=255, verbose_name='Business Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Business Email')),
                ('phone', models.CharField(max_length=20, verbose_name='Business Phone')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('description', models.TextField(verbose_name='Business Description')),
                ('founded_date', models.DateField(blank=True, null=True, verbose_name='Founded Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_businesses', to=settings.AUTH_USER_MODEL, verbose_name='Business Owner')),
            ],
            options={
                'verbose_name': 'Business',
                'verbose_name_plural': 'Businesses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BusinessAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icon Class')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='business.businessamenitycategory', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Business Amenity',
                'verbose_name_plural': 'Business Amenities',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BusinessLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('street_address', models.CharField(blank=True, help_text='Street address including house/building number', max_length=255, verbose_name='Street Address')),
                ('neighborhood', models.CharField(blank=True, help_text='Neighborhood or district', max_length=100, verbose_name='Neighborhood')),
                ('city', models.CharField(help_text='City name', max_length=100, verbose_name='City')),
                ('region', models.CharField(help_text='State, province, or region', max_length=100, verbose_name='Region')),
                ('country', models.CharField(default='Cameroon', help_text='Country name', max_length=100, verbose_name='Country')),
                ('postal_code', models.CharField(blank=True, help_text='Postal or ZIP code', max_length=20, verbose_name='Postal Code')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='Latitude coordinate', max_digits=10, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Longitude coordinate', max_digits=11, null=True, verbose_name='Longitude')),
                ('business_location_type', models.CharField(choices=[('hotel', 'Hotel'), ('restaurant', 'Restaurant'), ('tour_operator', 'Tour Operator'), ('transport', 'Transport Company'), ('other', 'Other')], max_length=50, verbose_name='Business Location Type')),
                ('name', models.CharField(help_text='Name of this business location/branch', max_length=255, verbose_name='Location Name')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('registration_number', models.CharField(max_length=100, unique=True, verbose_name='Registration Number')),
                ('description', models.TextField(verbose_name='Business Description')),
                ('founded_date', models.DateField(blank=True, null=True, verbose_name='Founded Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('is_main_location', models.BooleanField(default=False, help_text='Whether this is the main location of the business', verbose_name='Main Location')),
                ('business', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='business.business', verbose_name='Business')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_business_locations', to=settings.AUTH_USER_MODEL, verbose_name='Business Owner')),
            ],
            options={
                'verbose_name': 'Business Location',
                'verbose_name_plural': 'Business Locations',
                'ordering': ['-is_main_location', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BusinessHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('day', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week', verbose_name='Day of Week')),
                ('opening_time', models.TimeField(help_text='Time when the business opens', verbose_name='Opening Time')),
                ('closing_time', models.TimeField(help_text='Time when the business closes', verbose_name='Closing Time')),
                ('is_closed', models.BooleanField(default=False, help_text='Whether the business is closed on this day', verbose_name='Closed')),
                ('break_start', models.TimeField(blank=True, help_text='Start time of break/siesta (if applicable)', null=True, verbose_name='Break Start Time')),
                ('break_end', models.TimeField(blank=True, help_text='End time of break/siesta (if applicable)', null=True, verbose_name='Break End Time')),
                ('business_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='business_hours', to='business.businesslocation', verbose_name='Business Location')),
            ],
            options={
                'verbose_name': 'Business Hours',
                'verbose_name_plural': 'Business Hours',
                'ordering': ['business_location', 'day'],
            },
        ),
        migrations.CreateModel(
            name='BusinessAmenityAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('details', models.TextField(blank=True, help_text='Any specific details about this amenity for this business', verbose_name='Additional Details')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('amenity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='business_assignments', to='business.businessamenity', verbose_name='Amenity')),
                ('business_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='amenity_assignments', to='business.businesslocation', verbose_name='Business Location')),
            ],
            options={
                'verbose_name': 'Business Amenity Assignment',
                'verbose_name_plural': 'Business Amenity Assignments',
                'ordering': ['business_location', 'amenity'],
            },
        ),
        migrations.CreateModel(
            name='BusinessLocationImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('image', models.ImageField(upload_to='business_location_images/', verbose_name='Image')),
                ('caption', models.CharField(blank=True, max_length=255, verbose_name='Caption')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Image')),
                ('business_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='business.businesslocation', verbose_name='Business Location')),
            ],
            options={
                'verbose_name': 'Business Location Image',
                'verbose_name_plural': 'Business Location Images',
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BusinessReview',
            fields=[
                ('review_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.review')),
                ('service_rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Service Rating')),
                ('value_rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Value for Money')),
                ('cleanliness_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Cleanliness Rating')),
                ('location_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Location Rating')),
                ('visit_date', models.DateField(help_text='Date when the reviewer visited the business', verbose_name='Visit Date')),
                ('visit_type', models.CharField(choices=[('BUSINESS', 'Business'), ('COUPLES', 'Couples'), ('FAMILY', 'Family'), ('FRIENDS', 'Friends'), ('SOLO', 'Solo')], max_length=20, verbose_name='Visit Type')),
                ('business_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='business.businesslocation', verbose_name='Business Location')),
            ],
            options={
                'verbose_name': 'Business Review',
                'verbose_name_plural': 'Business Reviews',
                'ordering': ['-created_at'],
            },
            bases=('core.review',),
        ),
        migrations.CreateModel(
            name='SpecialBusinessHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when this record was last updated', verbose_name='Updated At')),
                ('date', models.DateField(help_text='Date for special hours', verbose_name='Date')),
                ('reason', models.CharField(help_text='Reason for special hours (e.g., Holiday, Event)', max_length=200, verbose_name='Reason')),
                ('is_closed', models.BooleanField(default=False, help_text='Whether the business is closed on this date', verbose_name='Closed')),
                ('opening_time', models.TimeField(blank=True, help_text='Special opening time (blank if closed)', null=True, verbose_name='Opening Time')),
                ('closing_time', models.TimeField(blank=True, help_text='Special closing time (blank if closed)', null=True, verbose_name='Closing Time')),
                ('business_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='special_business_hours', to='business.businesslocation', verbose_name='Business Location')),
            ],
            options={
                'verbose_name': 'Special Business Hours',
                'verbose_name_plural': 'Special Business Hours',
                'ordering': ['business_location', 'date'],
            },
        ),
        migrations.AddIndex(
            model_name='business',
            index=models.Index(fields=['is_verified'], name='business_bu_is_veri_793c55_idx'),
        ),
        migrations.AddIndex(
            model_name='business',
            index=models.Index(fields=['is_active'], name='business_bu_is_acti_a9d38c_idx'),
        ),
        migrations.AddIndex(
            model_name='businesslocation',
            index=models.Index(fields=['business'], name='business_bu_busines_97a898_idx'),
        ),
        migrations.AddIndex(
            model_name='businesslocation',
            index=models.Index(fields=['is_main_location'], name='business_bu_is_main_3dc471_idx'),
        ),
        migrations.AddIndex(
            model_name='businesslocation',
            index=models.Index(fields=['is_active'], name='business_bu_is_acti_8fcc6a_idx'),
        ),
        migrations.AddIndex(
            model_name='businesshours',
            index=models.Index(fields=['business_location', 'day'], name='business_bu_busines_4ac9b2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='businesshours',
            unique_together={('business_location', 'day')},
        ),
        migrations.AlterUniqueTogether(
            name='businessamenityassignment',
            unique_together={('business_location', 'amenity')},
        ),
        migrations.AddIndex(
            model_name='businessreview',
            index=models.Index(fields=['business_location'], name='business_bu_busines_a1c07d_idx'),
        ),
        migrations.AddIndex(
            model_name='specialbusinesshours',
            index=models.Index(fields=['business_location', 'date'], name='business_sp_busines_533a78_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='specialbusinesshours',
            unique_together={('business_location', 'date')},
        ),
    ]
